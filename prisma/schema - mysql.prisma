generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_DATABASE_URL")
}

enum role {
  admin
  instructor
  student
}

enum transactions_status {
  in_process
  success
  failed
}

enum users_qualification {
  higher_secondary
  under_graduate
  post_graduate
}

model Admin {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  role     role   @default(instructor)

  posts   Blog[]
  courses Course_details[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Users {
  id               Int                 @id @default(autoincrement())
  name             String
  email            String              @unique
  contact          String
  password         String
  is_authenticated Boolean             @default(false)
  qualification    users_qualification
  address          String?
  role             role                @default(student)

  assignment_complete Assigment_complete[]
  auth_token          Auth_token[]
  cart                Cart[]
  exam_complete       Exam_complete[]
  questions           Questions[]
  reviews             Reviews[]
  video_watched       Video_watched[]
  whishlist           Whistlist[]

  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  Transactions Transactions[]
}

model Assigment_complete {
  id     Int     @id @default(autoincrement())
  userId Int?
  users  Users[]
}

model Assignments {
  id                  Int                  @id @default(autoincrement())
  chaptersId          String               @db.ObjectId
  src                 String
  is_visible          Boolean              @default(true)
  created_at          DateTime             @default(now())
  Chapters            Chapters?            @relation(fields: [chaptersId], references: [id])
  assignemnt_complete Assigment_complete[]
}

model Auth_token {
  id      Int    @id @default(autoincrement())
  token   String
  Users   Users  @relation(fields: [usersId], references: [id])
  usersId String @db.ObjectId
}

model Blog {
  id         Int      @id @default(autoincrement())
  title      String?  @unique
  slug       String?  @unique
  body       String
  thumbnail  String
  tags       String[] @db.Array(String)
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  admin      Admin?   @relation(fields: [adminId], references: [id])
  adminId    String?  @db.ObjectId
}

model Cart {
  id               Int            @id @default(autoincrement())
  Course_details   Course_details @relation(fields: [course_detailsId], references: [id])
  course_detailsId String         @db.ObjectId
  Users            Users          @relation(fields: [usersId], references: [id])
  usersId          String         @db.ObjectId
}

model Chapters {
  id           Int     @id @default(autoincrement())
  srno         Int
  chapter_name String
  is_visible   Boolean @default(true)

  assignments Assignments[]
  videos      Videos[]

  created_at       DateTime        @default(now())
  Course_details   Course_details? @relation(fields: [course_detailsId], references: [id])
  course_detailsId String?         @db.ObjectId
}

model Course_details {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  slug        String   @unique
  description String
  thumbnail   String
  price       Float
  duration    String?
  requirement String?
  is_active   Boolean  @default(false)
  tags        String[] @db.Array(String)

  cart        Cart[]
  chapters    Chapters[]
  exams       Exams[]
  order_items Order_items[]
  questions   Questions[]
  reviews     Reviews[]
  whishlist   Whistlist[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  admin      Admin?   @relation(fields: [adminId], references: [id])
  adminId    String?  @db.ObjectId
}

model Discount_coupon {
  id           Int      @id @default(autoincrement())
  coupon_title String   @unique
  coupon_code  String   @unique
  discount     Float
  valid_till   String
  created_at   DateTime @default(now())
}

model Exam_complete {
  id           Int      @id @default(autoincrement())
  total_marks  Int
  completed_on DateTime @default(now())
  exams        Exams    @relation(fields: [examsId], references: [id])
  examsId      String   @db.ObjectId
  Users        Users?   @relation(fields: [usersId], references: [id])
  usersId      String?  @db.ObjectId
}

model Exam_questions {
  id Int @id @default(autoincrement())

  option_a       String   @unique
  option_b       String   @unique
  option_c       String   @unique
  correct_answer String
  created_at     DateTime @default(now())
  exams          Exams    @relation(fields: [examsId], references: [id])
  examsId        String   @db.ObjectId
}

// ! make it more effecient
model Exams {
  id Int @id @default(autoincrement())

  // REMOVE IT LATER :: START
  exam_name        String
  google_form_link String  @unique
  is_active        Boolean
  // END


  exam_questions Exam_questions[]
  exam_complete  Exam_complete[]

  created_at       DateTime        @default(now())
  course_details   Course_details? @relation(fields: [course_detailsId], references: [id])
  course_detailsId String?         @db.ObjectId
}

model Order_items {
  id               Int            @id @default(autoincrement())
  Course_details   Course_details @relation(fields: [course_detailsId], references: [id])
  course_detailsId String         @db.ObjectId
  Transactions     Transactions   @relation(fields: [transactionsId], references: [id])
  transactionsId   String         @db.ObjectId
}

model Questions {
  id               Int            @id @default(autoincrement())
  question         String
  reply            String
  created_at       DateTime       @default(now())
  Course_details   Course_details @relation(fields: [course_detailsId], references: [id])
  course_detailsId String         @db.ObjectId
  Users            Users?         @relation(fields: [usersId], references: [id])
  usersId          String?        @db.ObjectId
}

model Reviews {
  id               Int            @id @default(autoincrement())
  review           String
  is_approved      Boolean
  created_at       DateTime       @default(now())
  Course_details   Course_details @relation(fields: [course_detailsId], references: [id])
  course_detailsId String         @db.ObjectId
  Users            Users          @relation(fields: [usersId], references: [id])
  usersId          String         @db.ObjectId
}

model Transactions {
  id                  Int                 @id @default(autoincrement())
  order_no            String              @unique
  razorpay_order_id   String
  razorpay_payment_id String
  razorpay_signature  String
  status              transactions_status @default(in_process)
  purchase_date       DateTime            @default(now())

  users       Users         @relation(fields: [usersId], references: [id])
  order_items Order_items[]
  usersId     String        @db.ObjectId
}

model Video_watched {
  id       Int    @id @default(autoincrement())
  Users    Users  @relation(fields: [usersId], references: [id])
  usersId  String @db.ObjectId
  Videos   Videos @relation(fields: [videosId], references: [id])
  videosId String @db.ObjectId
}

model Videos {
  id         Int     @id @default(autoincrement())
  srno       Int
  title      String
  src        String
  is_visible Boolean

  video_watched Video_watched[]

  created_at DateTime  @default(now())
  Chapters   Chapters? @relation(fields: [chaptersId], references: [id])
  chaptersId String?   @db.ObjectId
}

model Whistlist {
  id               Int             @id @default(autoincrement())
  Course_details   Course_details? @relation(fields: [course_detailsId], references: [id])
  course_detailsId String?         @db.ObjectId
  Users            Users?          @relation(fields: [usersId], references: [id])
  usersId          String?         @db.ObjectId
}
